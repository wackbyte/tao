# Neg

class Neg =
    => neg : Self -> Self

member Int of Neg =
    => neg = fn x => -x

member Real of Neg =
    => neg = fn x => -x

# Not

$[lang(not)]
class Not =
    => not : Self -> Self

member Bool of Not =
    => not = fn x => !x

# Add

class Add =
    => add : Self -> Self -> Self

member Nat of Add =
    => add = fn x, y => x + y

member Int of Add =
    => add = fn x, y => x + y

member Real of Add =
    => add = fn x, y => x + y

# Sub

class Sub =
    => sub : Self -> Self -> Self

member Int of Sub =
    => sub = fn x, y => x - y

member Real of Sub =
    => sub = fn x, y => x - y

# Mul

class Mul =
    => mul : Self -> Self -> Self

member Nat of Mul =
    => mul = fn x, y => x * y

member Int of Mul =
    => mul = fn x, y => x * y

member Real of Mul =
    => mul = fn x, y => x * y

# Div

class Div =
    => div : Self -> Self -> Self

member Real of Div =
    => div = fn x, y => x / y

# Rem

class Rem =
    => rem : Self -> Self -> Self

member Nat of Rem =
    => rem = fn x, y => x % y

# Eq

class Eq =
    => eq : Self -> Self -> Bool

member Nat of Eq =
    => eq = fn x, y => x = y

member Int of Eq =
    => eq = fn x, y => x = y

member Real of Eq =
    => eq = fn x, y => x = y

# Ord

class Ord =
    => cmp : Self -> Self -> Ordering

data Ordering =
    | Less
    | Greater
    \ Equal

member Nat of Ord =
    => cmp = fn x, y =>
        if x < y then
            Less
        else if x > y then
            Greater
        else
            Equal

member Int of Ord =
    => cmp = fn x, y =>
        if x < y then
            Less
        else if x > y then
            Greater
        else
            Equal

member Real of Ord =
    => cmp = fn x, y =>
        if x < y then
            Less
        else if x > y then
            Greater
        else
            Equal

# OrdExt

class OrdExt < Ord =
    => eq : Self -> Self -> Bool
    => not_eq : Self -> Self -> Bool
    => less : Self -> Self -> Bool
    => less_eq : Self -> Self -> Bool
    => greater : Self -> Self -> Bool
    => greater_eq : Self -> Self -> Bool

for A < Ord member A of OrdExt =
    => eq = fn x, y => match A.cmp(x, y) in
        | Equal => True
        \ _ => False
    => not_eq = fn x, y => match A.cmp(x, y) in
        | Equal => False
        \ _ => True
    => less = fn x, y => match A.cmp(x, y) in
        | Less => True
        \ _ => False
    => less_eq = fn x, y => match A.cmp(x, y) in
        | Greater => False
        \ _ => True
    => greater = fn x, y => match A.cmp(x, y) in
        | Greater => True
        \ _ => False
    => greater_eq = fn x, y => match A.cmp(x, y) in
        | Less => False
        \ _ => True
