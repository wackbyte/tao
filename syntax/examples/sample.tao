# Data syntax

data Never = # Data without variants has no inhabitants

data Unit = ()

data List A =
	| Item (A, List A)
	| Empty

data Maybe A =
	| Just A
	| None

data Result A, E =
	| Ok A
	| Err E

data NatWrapper = Nat

data Person = (
	.name: Str,
	.age: Real,
)

# Type alias syntax

type Natural = Nat

type NonEmpty A = (A, List A)

# Definition syntax

def five = 5
def six = five + 1

def bob = Person (
	# '=' used instead of ':' because the latter is for type hints, which are permitted in patterns during destructuring
	.name = "Bob",
	.age = 42,
)

# Function syntax

def add = fn x, y => x + y # TODO: Investigate whether `fn add x, y => x + y` would conflict with inline function syntax

def factorial = fn
	| 0 => 1
	| x => x * factorial(x - 1)

def zip = fn
	| Just x, Just y => Just (x, y)
	| _, _ => None

# Type hints can be added with ':' and may include the wildcard type, '?', which gets inferred
# Type parameters combe before type hints
def append A : A -> [?] -> [?] = fn
	| x, [] => [x]
	# 'arg:f' is equivalent to 'f(arg)' and allows method-like chaining of functions
	| x, [y .. ys] => [y] ++ ys:append(x)

def len A : [A] -> Nat = fn
	| [] => 0
	| [_ .. tail] => 1 + tail:len

def make_tuple A, B = fn
	# Type annotations are permitted in patterns
	| a : A, b : B => (a, b)

def filter A : (A -> Bool) -> [A] -> [A] = fn
    | _, [] => []
    | f, [x .. xs] => if x:f
		then [x] ++ xs:filter(f)
		else xs:filter(f)

# Typeclasses are specified with `A < Ord` meaning "A is a subset of the class Ord"
# TODO: How to specify multiple typeclasses?
def qsort A < Ord : [A] -> [A] = fn
    | [] => []
	# Binding with '~' is permitted in patterns
    | xs ~ [x ..] =>
		# '< x' is shorthand for 'fn a => a < x'
		xs:filter(< x):qsort
			++
		xs:filter(>= x):qsort

# Inline function syntax

def main =
	# Simple case
	let identity = fn x => x in
	# Inline functions also support pattern matching
	let unwrap_or = fn
		| _, Just x => x
		| default, None => default
	in
	let unwrap_or_zero = fn
		| Just x => x
		| None => 0
	in
	identity(5)

# Match syntax

def main =
	let x = 5 in
	# Branches, like function pattern matching
	let desc = match x in
		| 0 => "zero"
		| 1 => "one"
		| _ => "a big number"
	in
	let x = match desc in
		| "zero" => Just 0
		| "one" => Just 1
		| _ => None
	in
	# Multiple assignments are permitted in a let
	let
		x = 7,
		y = 8,
	in
	x

# Typeclass constraint syntax

def less A < Ord : A -> A -> Bool = fn
	| x, y => x < y

data Ordering =
	| Equal
	| Less
	| Greater

# Typeclass membership can sometimes be automatically derived with compiler support
impl element Ordering of Eq = auto

# Typeclass syntax

# TODO: Generics on type classes?
class Ord < PartialOrd =
	cmp : Self -> Self -> Ordering,

impl element Nat of Ord =
	cmp = fn x, y => ... ,

class Add R =
	Output,
	add : Self -> R -> Output,

# As with other constructs, braces are permitted to avoid ambiguity
impl element Nat of Add Nat = {
	Output = Nat,
	add = fn x, y = x + y,
}

data Vec2 A = (
	.x : A,
	.y : A,
)

impl A < Add B, B element Vec2 A of Add B =
	Output = Vec2 (A of Add B).Output
	add = fn Vec2 ( .x, .y ), p => Vec2 ( .x = x + p, .y = y + p )

# Equivalent Rust syntax
impl<A: Add<B>, B> Add<B> for Vec2<A> {
	type Output = <A as Add<B>>::Output;
	fn add(self, p: B) -> Self::Output {
		Vec2 { x: self.x + p, y: self.y + p }
	}
}
